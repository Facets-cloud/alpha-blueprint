{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "kind": {
            "type": "string",
            "description": "Describes the type of resource. e.g. ingress, application, mysql etc. If not specified, fallback is the `folder_name`/instances",
            "enum": [
                "service"
            ]
        },
        "flavor": {
            "type": "string",
            "description": "Implementation selector for the resource. e.g. for a resource type ingress, default, aws_alb, gcp_alb etc.",
            "enum": [
                "default",
                "k8s"
            ]
        },
        "version": {
            "type": "string",
            "description": "This field can be used to pin to a particular version",
            "enum": [
                "0.1",
                "latest"
            ]
        },
        "disabled": {
            "type": "boolean",
            "description": "Flag to disable the resource"
        },
        "provided": {
            "type": "boolean",
            "description": "Flag to tell if the resource should not be provisioned by facets",
            "default": false
        },
        "advanced": {
            "type": "object",
            "description": "Advanced section of kind service",
            "properties": {
                "aws": {
                    "type": "object",
                    "description": "Map of all aws advanced keys",
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "properties": {
                        "iam": {
                            "type": "object",
                            "description": "This is the iam key where all iam permissions are attached for the deployment",
                            "additionalProperties": false,
                            "minProperties": 1,
                            "patternProperties": {
                                "^[a-zA-Z0-9_.-]*$": {
                                    "description": "This is the name of the iam object that you are creating, it can be of any name",
                                    "properties": {
                                        "arn": {
                                            "type": "string",
                                            "definition": "The arn of the policy that you want to create a role and attach it to the deployment"
                                        }
                                    },
                                    "required": [
                                        "arn"
                                    ]
                                }
                            }
                        }
                    }
                },
                "chart": {
                    "type": "object",
                    "description": "Advanced section of the chart service",
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "properties": {
                        "image_pull_secrets": {
                            "type": "object",
                            "description": "Map of all the image pull secrets for the container image to be pulled from the repository. Each map should have name specified within it. For more information refer to: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-pod-that-uses-your-secret"
                        },
                        "node_selector": {
                            "type": "object",
                            "description": "Map of all node selectors for the application"
                        }
                    }
                },
                "common": {
                    "type": "object",
                    "description": "Advanced section of the app-chart service",
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "properties": {
                        "app_chart": {
                            "type": "object",
                            "description": "Map of all advanced values to be configured to app-chart",
                            "properties": {
                                "values": {
                                    "type": "object",
                                    "description": "Values to be passed to app-chart helm chart",
                                    "properties": {
                                        "enable_service_links": {
                                            "type": "boolean",
                                            "description": "Enable service links"
                                        },
                                        "hpa": {
                                            "type": "object",
                                            "description": "Configurations for horizontal pod autoscaler"
                                        },
                                        "pod": {
                                            "type": "object",
                                            "description": "Pod configurations"
                                        },
                                        "node": {
                                            "type": "object",
                                            "description": "Node configurations"
                                        },
                                        "tolerations": {
                                            "type": "object",
                                            "description": "Tolerations to be added to service",
                                            "patternProperties": {
                                                "^[a-zA-Z0-9_.-]*$": {
                                                    "properties": {
                                                        "key": {
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "type": "string"
                                                        },
                                                        "operator": {
                                                            "type": "string"
                                                        },
                                                        "effect": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "pod_distribution": {
                                                "type": "object",
                                                "description": "Pod topology for distributing pods across nodes"
                                            },
                                            "sidecars": {
                                                "type": "object",
                                                "description": "Sidecar containers configurations",
                                                "patternProperties": {
                                                    "^[a-zA-Z0-9_.-]*$": {
                                                        "properties": {
                                                            "image": {
                                                                "type": "string",
                                                                "description": "Image of the sidecar container"
                                                            },
                                                            "runtime": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "size": {
                                                                        "type": "object",
                                                                        "description": "Resource request and limits configurations",
                                                                        "properties": {
                                                                            "cpu": {
                                                                                "type": "string",
                                                                                "description": "cpu request"
                                                                            },
                                                                            "memory": {
                                                                                "type": "string",
                                                                                "description": "memory request"
                                                                            },
                                                                            "cpu_limit": {
                                                                                "type": "string",
                                                                                "description": "cpu limit"
                                                                            },
                                                                            "memory_limit": {
                                                                                "type": "string",
                                                                                "description": "memory limit"
                                                                            }
                                                                        }
                                                                    },
                                                                    "volumes": {
                                                                        "type": "object",
                                                                        "description": "Volumes to be attached to sidecar",
                                                                        "properties": {
                                                                            "config_maps": {
                                                                                "type": "object",
                                                                                "description": "map of config_maps to attach to sidecar",
                                                                                "patternProperties": {
                                                                                    "^[a-zA-Z0-9_.-]*$": {
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "type": "string",
                                                                                                "description": "name of the config map"
                                                                                            },
                                                                                            "mount_path": {
                                                                                                "type": "string",
                                                                                                "description": "the mount path for the config map"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "command": {
                                                                        "type": "array",
                                                                        "description": "Commands to run before starting sidecar container"
                                                                    },
                                                                    "args": {
                                                                        "type": "array",
                                                                        "description": "arguments to be passed to commands"
                                                                    }
                                                                }
                                                            },
                                                            "env": {
                                                                "type": "object",
                                                                "description": "environment variables"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "security_context": {
                                                "type": "object",
                                                "description": "security context for container",
                                                "properties": {
                                                    "fsgroup": {
                                                        "type": "string"
                                                    },
                                                    "run_as_user": {
                                                        "type": "string"
                                                    },
                                                    "run_as_group": {
                                                        "type": "string"
                                                    },
                                                    "fs_group_change_policy": {
                                                        "type": "string"
                                                    },
                                                    "run_as_non_root": {
                                                        "type": "boolean"
                                                    },
                                                    "linux_options": {
                                                        "type": "object"
                                                    },
                                                    "comp_profile": {
                                                        "type": "string"
                                                    },
                                                    "supplemental_groups": {
                                                        "type": "string"
                                                    },
                                                    "sysctls": {
                                                        "type": "string"
                                                    },
                                                    "windows_options": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "lifecycle": {
                                                "type": "object",
                                                "description": "",
                                                "properties": {
                                                    "preStop": {
                                                        "type": "object",
                                                        "description": "",
                                                        "properties": {
                                                            "exec": {
                                                                "type": "object",
                                                                "description": "",
                                                                "properties": {
                                                                    "command": {
                                                                        "type": "array",
                                                                        "description": "The commands to be executed"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "postStart": {
                                                        "type": "object",
                                                        "description": "",
                                                        "properties": {
                                                            "exec": {
                                                                "type": "object",
                                                                "description": "",
                                                                "properties": {
                                                                    "command": {
                                                                        "type": "array",
                                                                        "description": "The commands to be executed"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "depends_on": {
            "type": "array",
            "items": {},
            "description": "Dependencies on other resources. e.g. application x may depend on mysql"
        },
        "metadata": {
            "type": "object",
            "description": "Metadata related to the resource",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the resource\n    - if not specified, fallback is the `filename`"
                }
            }
        },
        "spec": {
            "type": "object",
            "properties": {
                "release": {
                    "description": "Map of all release keys",
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "image": {
                            "type": "string",
                            "description": "The docker image of the application that you want to run"
                        },
                        "build": {
                            "type": "object",
                            "description": "These contains the build objects required for running the containers",
                            "properties": {
                                "artifactory": {
                                    "type": "string",
                                    "description": "Parent artifactory name"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of the artifactory"
                                },
                                "pull_policy": {
                                    "type": "string",
                                    "description": "ImagePullPolicy",
                                    "enum": [
                                        "IfNotPresent",
                                        "Always",
                                        "Never"
                                    ]
                                }
                            },
                            "required": [
                                "artifactory",
                                "name"
                            ]
                        },
                        "strategy": {
                            "type": "object",
                            "description": "The type of upgrade strategy to be followed by this service",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Your kubernetes rollout type eg: RollingUpdate or Recreate",
                                    "enum": [
                                        "RollingUpdate",
                                        "Recreate"
                                    ]
                                },
                                "max_available": {
                                    "type": "string",
                                    "description": "If type RollingUpdate , this is the max number of pods that can be created from the default replicas"
                                },
                                "max_unavailable": {
                                    "type": "string",
                                    "description": "If type RollingUpdate , this is the max number of pods that can be unavailable from the default replicas"
                                }
                            }
                        },
                        "disruption_policy": {
                            "type": "object",
                            "description": "The disruption policy for the service",
                            "properties": {
                                "min_available": {
                                    "type": "string",
                                    "description": "This is the min number of pods should be available in case of failures"
                                },
                                "max_unavailable": {
                                    "type": "string",
                                    "description": "This is the max number of pods that can be unavailable during a failure."
                                }
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This will specify the type of service you want to create. eg: application, statefulset,cronjob etc",
                    "enum": [
                        "application",
                        "statefulset",
                        "cronjob",
                        "job"
                    ]
                },
                "enable_host_anti_affinity": {
                    "type": "boolean",
                    "description": "boolean to enable or disable host anti affinity"
                },
                "env": {
                    "type": "object",
                    "description": "The key value pairs of all the environment variables that needs to be passed to the pod"
                },
                "runtime": {
                    "description": "Map of all runtime keys",
                    "type": "object",
                    "properties": {
                        "command": {
                            "type": "array",
                            "description": "The list of commands you want to perform before starting the container"
                        },
                        "args": {
                            "type": "array",
                            "description": "The list of arguments you want to pass for the above mentioned command"
                        },
                        "ports": {
                            "type": "object",
                            "additionalProperties": false,
                            "minProperties": 1,
                            "patternProperties": {
                              "^[a-zA-Z0-9_.-]*$": {
                                "description": "This is the name of the port that you have to specify",
                                "type":"object",
                                "properties": {
                                  "protocol": {
                                    "type": "string",
                                    "description": "the protocol of the port , either tcp or udp",
                                    "enum": [
                                      "tcp",
                                      "udp"
                                    ]
                                  },
                                  "port": {
                                    "type": "string",
                                    "description": "the port number where the pod is exposed"
                                  },
                                  "service_port": {
                                    "type": "string",
                                    "description": "the port number where the service is exposed, this is optional"
                                  }
                                },
                                "required": [
                                  "protocol",
                                  "port"
                                ]
                              },                                  
                            "description": "Maps of all the ports that you want to expose in the service"
                        }
                    },
                        "metrics": {
                            
                                "$schema": "http://json-schema.org/draft-04/schema#",
                                "type": "object",
                                "additionalProperties": false,
                                "minProperties": 1,
                                "patternProperties": {
                                  "^[a-zA-Z0-9_.-]*$": {
                                    "description": "This is the name of the metrics, this can be any name",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "description": "the path where the service monitor should scrape metrics"
                                      },
                                      "port_name": {
                                        "type": "string",
                                        "description": "name of the service monitor"
                                      }
                                    },
                                    "required": [
                                      "path",
                                      "port_name"
                                    ]
                                  }
                                },
                              
                            "description": "Maps of all the metrics port that you want to expose to prometheus"
                        },
                        "size": {
                            "$schema": "http://json-schema.org/draft-07/schema#",
                            "type": "object",
                            "required": [
                              "cpu",
                              "memory"
                            ],
                            "properties": {
                              "cpu": {
                                "type": "string",
                                "description": "The number of CPU cores required, e.g '1' or '1000m'",
                                "minLength": 1,
                                "pattern": "^[0-9]+[m]?$",
                                "examples": [
                                  "1",
                                  "1000m"
                                ]
                              },
                              "memory": {
                                "type": "string",
                                "description": "The amount of memory required, e.g '800Mi' or '1.5Gi'",
                                "minLength": 1,
                                "pattern": "^[0-9]+(\\.[0-9]+)?[EiKMGTP]i?",
                                "examples": [
                                  "800Mi",
                                  "1.5Gi"
                                ]
                              },
                              "cpu_limit": {
                                "type": "string",
                                "description": "The CPU limit to set a maximum limit on the amount of CPU resources utilization, e.g '1' or '1000m'",
                                "minLength": 1,
                                "pattern": "^[0-9]+[m]?$",
                                "examples": [
                                  "1",
                                  "1000m"
                                ]
                              },
                              "memory_limit": {
                                "type": "string",
                                "description": "The memory limit to set a maximum limit on the amount of memory resources utilization, e.g '800Mi' or '1.5Gi'",
                                "minLength": 1,
                                "pattern": "^[0-9]+(\\.[0-9]+)?[EiKMGTP]i?",
                                "examples": [
                                  "800Mi",
                                  "1.5Gi"
                                ]
                              }
                            },
                            "description": "Size of the deployment pods"
                        },
                        "volumes": {
                            "type": "object",
                            "description": "All the volumes you want to attach to the service",
                            "properties": {
                                "config_maps": {
                                    "type": "object",
                                    "description": "The map of all the config maps that you want to mount",
                                    "additionalProperties": false,
                                    "minProperties": 1,
                                    "patternProperties": {
                                        "^[a-zA-Z0-9_.-]*$": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The name of the config map that has been created in the kubernetes cluster"
                                                },
                                                "mount_path": {
                                                    "type": "string",
                                                    "description": "The mount path for the config map"
                                                }
                                            }
                                        }
                                    }
                                },
                                "secrets": {
                                    "type": "object",
                                    "description": "The map of all the secrets that you want to mount",
                                    "additionalProperties": false,
                                    "minProperties": 1,
                                    "patternProperties": {
                                        "^[a-zA-Z0-9_.-]*$": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The name of the secret that has been created in the kubernetes cluster"
                                                },
                                                "mount_path": {
                                                    "type": "string",
                                                    "description": "The mount path for the secrets"
                                                }
                                            }
                                        }
                                    }
                                },
                                "pvc": {
                                    "type": "object",
                                    "description": "The map of all the pvcs that you want to mount",
                                    "additionalProperties": false,
                                    "minProperties": 1,
                                    "patternProperties": {
                                        "^[a-zA-Z0-9_.-]*$": {
                                            "properties": {
                                                "claim_name": {
                                                    "type": "string",
                                                    "description": "The name of the pvc that has been created in the kubernetes cluster"
                                                },
                                                "mount_path": {
                                                    "type": "string",
                                                    "description": "The mount path for the pvc"
                                                }
                                            }
                                        }
                                    }
                                },
                                "host_path": {
                                    "type": "object",
                                    "description": "The map of all the secrets that you want to mount",
                                    "additionalProperties": false,
                                    "minProperties": 1,
                                    "patternProperties": {
                                        "^[a-zA-Z0-9_.-]*$": {
                                            "properties": {
                                                "mount_path": {
                                                    "type": "string",
                                                    "description": "The mount path for the host path"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "health_checks": {
                            "type": "object",
                            "description": "All the health check related key value pairs",
                            "properties": {
                                "start_up_time": {
                                    "type": "string",
                                    "description": "The time kubernetes api needs to wait until the application is ready"
                                },
                                "liveness_start_up_time": {
                                    "type": "string",
                                    "description": "The time kubernetes api needs to wait until the application is ready for liveness check, this is takes precedence from start_up_time"
                                },
                                "readiness_start_up_time": {
                                    "type": "string",
                                    "description": "The time kubernetes api needs to wait until the application is ready for readiness check, this is takes precedence from start_up_time"
                                },
                                "timeout": {
                                    "type": "string",
                                    "description": "Timeout for the health check"
                                },
                                "liveness_timeout": {
                                    "type": "string",
                                    "description": "Timeout for the health check liveness, this is takes precedence from timeout"
                                },
                                "readiness_timeout": {
                                    "type": "string",
                                    "description": "Timeout for the health check readiness, this is takes precedence from timeout"
                                },
                                "period": {
                                    "type": "string",
                                    "description": "This is the repeated interval in which kubelet does a health check"
                                },
                                "liveness_period": {
                                    "type": "string",
                                    "description": "This is the repeated interval in which kubelet does a health check, this is takes precedence from period"
                                },
                                "readiness_period": {
                                    "type": "string",
                                    "description": "This is the repeated interval in which kubelet does a health check, this is takes precedence from period"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Specify the port in which the health checks should be made"
                                },
                                "liveness_port": {
                                    "type": "string",
                                    "description": "Specify the port in which the health checks should be made, this is takes precedence from port"
                                },
                                "readiness_port": {
                                    "type": "string",
                                    "description": "Specify the port in which the health checks should be made, this is takes precedence from port"
                                },
                                "liveness_url": {
                                    "type": "string",
                                    "description": "URL to make the liveness check"
                                },
                                "readiness_url": {
                                    "type": "string",
                                    "description": "URL to make the readiness check"
                                },
                                "liveness_exec_command": {
                                    "type": "array",
                                    "description": "The list of commands to make liveness check "
                                },
                                "readiness_exec_command": {
                                    "type": "array",
                                    "description": "The list of commands to make readiness check"
                                }
                            }                         
                        },
                        "autoscaling": {
                            "type": "object",
                            "properties": {
                                "min": {
                                    "type": "string",
                                    "description": "This is the min replicas where the hpa downscales to"
                                },
                                "max": {
                                    "type": "string",
                                    "description": "This is the max replicas where the hpa upscales to "
                                },
                                "cpu_threshold": {
                                    "type": "string",
                                    "description": "The max cpu threshold that the hpa waits until it upscales"
                                },
                                "ram_threshold": {
                                    "type": "string",
                                    "description": "The max ram threshold that the hpa waits until it upscales"
                                },
                                "packets_per_second": {
                                    "type": "string",
                                    "description": "The max number of packets that can be sent to the pod, once exceeded it autoscales. eg: 10k"
                                },
                                "requests_per_second": {
                                    "type": "object",
                                    "description": "Requests per second RPS object keys",
                                    "properties": {
                                        "threshold": {
                                            "type": "string",
                                            "description": "The rps threshold that hpa looks for , once exceeds it autoscales eg: 10k"
                                        },
                                        "ingress_name": {
                                            "type": "string",
                                            "description": "Name of the ingress object that the hpa should watch for autoscaling"
                                        }
                                    },
                                    "required": [
                                        "threshold",
                                        "ingress_name"
                                    ]
                                }
                            }
                        }
                    }
                },
                "restart_policy": {
                    "type": "string",
                    "description": "Can be of type Always , OnFailure or Never",
                    "enum": [
                        "Always",
                        "OnFailure",
                        "Never"
                    ]
                }
            }           
        }
    }
}
