{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "description": "Schema for SQS",
  "allOf": [
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "Describes the type of resource. e.g. ingress, application, mysql etc. If not specified, fallback is the `folder_name`/instances"
            },
            "flavor": {
              "type": "string",
              "description": "Implementation selector for the resource. e.g. for a resource type ingress, default, aws_alb, gcp_alb etc."
            },
            "version": {
              "type": "string",
              "description": "This field can be used to pin to a particular version",
              "enum": ["0.1"]
            },
            "lifecycle": {
              "type": "string",
              "description": "This field describes the phase in which the resource has to be invoked (`ENVIRONMENT_BOOTSTRAP`)",
              "enum": [
                "ENVIRONMENT_BOOTSTRAP",
                "ENVIRONMENT"
              ]
            },
            "disabled": {
              "type": "boolean",
              "description": "Flag to disable the resource"
            },
            "conditional_on_intent": {
              "type": "string",
              "description": "Flag to enable the resource based on intent availability. eg mysql if mysql dashboard is required to be deployed. Note: Need to have the instance running beforehand to avail."
            },
            "provided": {
              "type": "boolean",
              "description": "Flag to tell if the resource should not be provisioned by facets",
              "default": false
            },
            "depends_on": {
              "type": "array",
              "items": {},
              "description": "Dependencies on other resources. e.g. application x may depend on mysql"
            },
            "metadata": {
              "type": "object",
              "description": "Metadata related to the resource",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the resource\n    - if not specified, fallback is the `filename`"
                },
                "tags": {
                  "type": "object",
                  "description": "Tags to be applied to the resource."
                }
              }
            },
            "spec": {
              "type": "object",
              "description": "Specification as per resource types schema",
              "properties": {
                "subscription": {
                  "type": "object",
                  "patternProperties": {
                    "^[a-zA-Z0-9_.-]*$": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Protocol to use."
                        },
                        "confirmation_timeout_in_minutes": {
                          "type": "integer",
                          "description": "Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure."
                        },
                        "delivery_policy": {
                          "type": "string",
                          "description": "JSON String with the delivery policy"
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "ARN of the Amazon SQS queue."
                        },
                        "endpoint_auto_confirms": {
                          "type": "boolean",
                          "description": "Whether the endpoint is capable of auto confirming subscription"
                        },
                        "filter_policy": {
                          "type": "string",
                          "description": "SON String with the filter policy that will be used in the subscription to filter messages seen by the target resource."
                        },
                        "filter_policy_scope": {
                          "type": "string",
                          "enum": ["MessageAttributes", "MessageBody"]
                        },
                        "raw_message_delivery": {
                          "type": "boolean",
                          "description": "Whether to enable raw message delivery"
                        },
                        "redrive_policy": {
                          "type": "string",
                          "description": "JSON String with the redrive policy that will be used in the subscription"
                        },
                        "replay_policy": {
                          "type": "string",
                          "description": "JSON String with the archived message replay policy that will be used in the subscription."
                        }
                      }
                    }
                  }
                }
              }
            },
            "out": {
              "type": "object",
              "description": "Output given by the resource for others to refer.",
              "properties": {
                "sns_topic_name": {
                  "type": "string",
                  "description": "Name of the SNS topic."
                },
                "consumer_policy_arn": {
                  "type": "string",
                  "description": "Policy ARN for consumer"
                },
                "producer_policy_arn": {
                  "type": "string",
                  "description": "Policy ARN for producer"
                },
                "topic_arn": {
                  "type": "string",
                  "description": "ARN of the SNS"
                }
              }
            },
            "advanced": {
              "type": "object",
              "description": "Advance values for SNS",
              "properties": {
                "default": {
                  "type": "object",
                  "description": "The advanced section of CloudFront module. You can pass the values as per terraform modules inputs - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sns_topic_subscription"
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provided": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "kind",
              "flavor",
              "version",
              "metadata",
              "out"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "provided": {
                "const": false
              }
            }
          },
          "then": {
            "required": [
              "kind",
              "flavor",
              "version",
              "metadata",
              "spec"
            ]
          }
        }
      ]
    }
  ],
  "required": [
    "kind",
    "flavor",
    "version"
  ]
}
