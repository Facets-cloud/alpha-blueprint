{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "allOf": [
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "description": "Describes the type of resource. e.g. ingress, application, mysql etc. If not specified, fallback is the `folder_name`/instances"
              },
              "flavor": {
                "type": "string",
                "description": "Implementation selector for the resource. e.g. for a resource type ingress, default, aws_alb, gcp_alb etc."
              },
              "version": {
                "type": "string",
                "description": "This field can be used to pin to a particular version"
              },
              "lifecycle": {
                "type": "string",
                "description": "This field describes the phase in which the resource has to be invoked (`ENVIRONMENT_BOOTSTRAP`)",
                "enum": [
                  "ENVIRONMENT_BOOTSTRAP",
                  "ENVIRONMENT"
                ]
              },
              "disabled": {
                "type": "boolean",
                "description": "Flag to disable the resource"
              },
              "conditional_on_intent": {
                "type": "string",
                "description": "Flag to enable the resource based on intent availability. eg mysql if mysql dashboard is required to be deployed. Note: Need to have the instance running beforehand to avail."
              },
              "provided": {
                "type": "boolean",
                "description": "Flag to tell if the resource should not be provisioned by facets",
                "default": false
              },
              "depends_on": {
                "type": "array",
                "items": {},
                "description": "Dependencies on other resources. e.g. application x may depend on mysql"
              },
              "metadata": {
                "type": "object",
                "description": "Metadata related to the resource",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the resource\n    - if not specified, fallback is the `filename`"
                  }
                },
                "required": []
              },
              "spec": {
                "type": "object",
                "description": "Specification as per resource types schema"
              },
              "out": {
                "type": "object",
                "description": "Output given by the resource for others to refer."
              },
              "advanced": {
                "type": "object",
                "description": "Additional fields if any for a particular implementation of a resource"
              }
            }
          },
          {
            "if": {
              "properties": {
                "provided": {
                  "const": true
                }
              }
            },
            "then": {
              "required": [
                "kind",
                "flavor",
                "version",
                "metadata"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "provided": {
                  "const": false
                }
              }
            },
            "then": {
              "required": [
                "kind",
                "flavor",
                "version",
                "metadata",
                "spec"
              ]
            }
          }
        ]
      },
      {
        "type": "object",
        "properties": {
          "spec": {
            "type": "object",
            "properties": {
              "mongodb_version": {
                "type": "string",
                "description": "The version number of the database engine to use"
              },
              "size": {
                "type": "object",
                "description": "Required Configurations for documentdb cluster instance",
                "properties": {
                  "instance_count": {
                    "type": "integer",
                    "description": "The number of cluster instances to be created. Defaults to 0"
                  },
                  "instance": {
                    "type": "string",
                    "description": "The instance class"
                  }
                },
                "required": [
                  "instance_count",
                  "instance"
                ]
              }
            },
            "required":[
              "size"
            ]
          }
        }
      },
      {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "mongo"
            ]
          },
          "flavor": {
            "type": "string",
            "enum": [
              "documentdb"
            ]
          },
          "version": {
            "type": "string",
            "enum": [
              "0.1"
            ]
          }
        }
      },
      {
        "type": "object",
        "properties": {
          "advanced": {
            "type": "object",
            "properties": {
              "documentdb": {
                "properties": {
                  "additional_tag_map": {
                    "type": "object",
                    "description": "Additional key-value pairs to add to each map in tags_as_list_of_maps"
                  },
                  "allow_ingress_from_self": {
                    "type": "boolean",
                    "description": "Adds the Document DB security group itself as a source for ingress rules"
                  },
                  "allowed_cidr_blocks": {
                    "type": "array",
                    "description": "List of CIDR blocks to be allowed to connect to the DocumentDB cluster"
                  },
                  "allowed_egress_cidr_blocks": {
                    "type": "array",
                    "description": "List of CIDR blocks to be allowed to send traffic outside of the DocumentDB cluster"
                  },
                  "allowed_security_groups": {
                    "type": "array",
                    "description": "List of existing Security Groups to be allowed to connect to the DocumentDB cluster"
                  },
                  "apply_immediately": {
                    "type": "boolean",
                    "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window"
                  },
                  "attributes": {
                    "type": "array",
                    "description": "ID element. Additional attributes (e.g. workers or cluster) to add to id"
                  },
                  "auto_minor_version_upgrade": {
                    "type": "boolean",
                    "description": "Specifies whether any minor engine upgrades will be applied automatically to the DB instance during the maintenance window or not"
                  },
                  "ca_cert_identifier": {
                    "type": "string",
                    "description": "The identifier of the CA certificate for the DB instance"
                  },
                  "cluster_dns_name": {
                    "type": "string",
                    "description": "Name of the cluster CNAME record to create in the parent DNS zone specified by zone_id"
                  },
                  "cluster_parameters": {
                    "type": "array",
                    "description": "List of DB parameters to apply"
                  },
                  "context": {
                    "type": "object",
                    "description": "Single object for setting entire context at once"
                  },
                  "db_port": {
                    "type": "integer",
                    "description": "DocumentDB port"
                  },
                  "deletion_protection": {
                    "type": "boolean",
                    "description": "A value that indicates whether the DB cluster has deletion protection enabled"
                  },
                  "delimiter": {
                    "type": "string",
                    "description": "Delimiter to be used between ID elements. Defaults to - (hyphen)"
                  },
                  "descriptor_formats": {
                    "type": "object",
                    "description": "Describe additional descriptors to be output in the descriptors output map."
                  },
                  "egress_from_port": {
                    "type": "integer",
                    "description": "[from_port]DocumentDB initial port range for egress (e.g. 0)"
                  },
                  "egress_protocol": {
                    "type": "string",
                    "description": "DocumentDB protocol for egress (e.g. -1, tcp)"
                  },
                  "egress_to_port": {
                    "type": "integer",
                    "description": "[to_port]DocumentDB initial port range for egress (e.g. 65535)"
                  },
                  "enable_performance_insights": {
                    "type": "boolean",
                    "description": "Specifies whether to enable Performance Insights for the DB Instance."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Set to false to prevent the module from creating any resources"
                  },
                  "enabled_cloudwatch_logs_exports": {
                    "type": "array",
                    "description": "List of log types to export to cloudwatch. The following log types are supported: audit, error, general, slowquery"
                  },
                  "environment": {
                    "type": "string",
                    "description": "ID element. Usually used for region e.g. 'uw2', 'us-west-2', OR role 'prod', 'staging', 'dev', 'UAT'"
                  },
                  "external_security_group_id_list": {
                    "type": "array",
                    "description": "List of external security group IDs to attach to the Document DB"
                  },
                  "id_length_limit": {
                    "type": "integer",
                    "description": "Limit id to this many characters (minimum 6)"
                  },
                  "kms_key_id": {
                    "type": "string",
                    "description": "The ARN for the KMS encryption key"
                  },
                  "label_key_case": {
                    "type": "string",
                    "description": "Controls the letter case of the tags keys (label names) for tags generated by this module"
                  },
                  "label_order": {
                    "type": "array",
                    "description": "The order in which the labels (ID elements) appear in the id."
                  },
                  "label_value_case": {
                    "type": "string",
                    "description": "Controls the letter case of ID elements (labels) as included in id, set as tag values, and output by this module individually."
                  },
                  "labels_as_tags": {
                    "type": "array",
                    "description": "Set of labels (ID elements) to include as tags in the tags output. Default is to include all labels."
                  },
                  "master_password": {
                    "type": "string",
                    "description": "Password for the master DB user."
                  },
                  "master_username": {
                    "type": "string",
                    "description": "Username for the master DB user."
                  },
                  "name": {
                    "type": "string",
                    "description": "ID element"
                  },
                  "namespace": {
                    "type": "string",
                    "description": "ID element. Usually an abbreviation of your organization name"
                  },
                  "preferred_backup_window": {
                    "type": "string",
                    "description": "Daily time range during which the backups happen"
                  },
                  "preferred_maintenance_window": {
                    "type": "string",
                    "description": "The window to perform maintenance in"
                  },
                  "reader_dns_name": {
                    "type": "string",
                    "description": "Name of the reader endpoint CNAME record to create in the parent DNS zone specified by zone_id"
                  },
                  "regex_replace_chars": {
                    "type": "string",
                    "description": "Terraform regular expression (regex) string"
                  },
                  "retention_period": {
                    "type": "number",
                    "description": "Number of days to retain backups for."
                  },
                  "skip_final_snapshot": {
                    "type": "boolean",
                    "description": "Determines whether a final DB snapshot is created before the DB cluster is deleted"
                  },
                  "snapshot_identifier": {
                    "type": "string",
                    "description": "Specifies whether or not to create this cluster from a snapshot"
                  },
                  "ssm_parameter_enabled": {
                    "type": "boolean",
                    "description": "Whether an SSM parameter store value is created to store the database password."
                  },
                  "ssm_parameter_path_prefix": {
                    "type": "string",
                    "description": "The path prefix for the created SSM parameter e.g. '/docdb/master-password/dev'."
                  },
                  "stage": {
                    "type": "string",
                    "description": "ID element. Usually used to indicate role, e.g. 'prod', 'staging', 'source', 'build', 'test', 'deploy', 'release'"
                  },
                  "storage_encrypted": {
                    "type": "boolean",
                    "description": "Specifies whether the DB cluster is encrypted"
                  },
                  "storage_type": {
                    "type": "string",
                    "description": "The storage type to associate with the DB cluster. Valid values: standard, iopt1"
                  },
                  "tenant": {
                    "type": "string",
                    "description": "ID element _(Rarely used, not included by default)_. A customer identifier, indicating who this instance of a resource is for"
                  },
                  "zone_id": {
                    "type": "string",
                    "description": "Route53 parent zone ID. If provided (not empty), the module will create sub-domain DNS records for the DocumentDB master and replicas"
                  }
                }
              }
            }
          }
        }
      },
      {
        "type": "object",
        "properties": {
          "out": {
            "type": "object",
            "properties": {}
          }
        }
      }
    ],
    "required": [
      "kind",
      "flavor",
      "version",
      "metadata",
      "spec"
    ]
}